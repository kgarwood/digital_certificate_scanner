# x509 Certificate Scanner Configuration File
# ===========================================
# This is the main file you will probably be changing if you're just trying
# to configure the Scanner rather than change code functionality.  Copy this
# file and just change the parameters to fit your own project.

# This is the directory where you will have all your code repositories.
# The scanner will recursively visit every directory in the target
# scanning directory to find files containing x509 certificate data.
target_scanning_directory: ~/code
# Specifies the directory where all the reporting results will appear.
# WARNING: THE REPORTS OUTPUT DIRECTORY IS DELETED AND CREATED EACH TIME
# THE APPLICATION RUNS
reports_output_directory: ~/code/temp_scanner_results

# This is a directory where you store all the x509 certificate files
# Consider this your 'source of truth' directory that will contain all the
# certificates that would appear as copies or in some kind of configuration
# file that appears in one of the sub directories of the target scanning
# directory
main_certificate_directory: code/verify-pki-certs

# This section specifies repositories which, if any of their files are
# changed, may warrant some kind of automated release process.  The
# attributes are:
#   'name': the name of the repository, which should be a top-level
#           directory within the target scanning directory
#   'release_command': provides the command line action that would initiate
#                      the release.  Note this application does not
#                      automatically invoke any release script, but it
#                      is meant to provide instructions to developers who
#                      would have to run them.
repositories_with_releases:
  - repository_with_release:
      name: verify-puppet
      release_command: ./do_release verify-puppet
  - repository_with_release:
      name: verify-hub-federation-config
      release_command: ./do_release federation_config
  - repository_with_release:
      name: verify-hub-federation-config
      release_command: ./do_release federation_config
  - repository_with_release:
      name: verify-metadata
      release_command: ./do_release federation_metadata
  - repository_with_release:
      name: verify-eidas-trust-anchor
      release_command: ./do_release federation_metadata


# This section specifies code repositories, which, if their files are
# altered or deleted, would not warrant a release.  The sections for
# code repositories that do and do not require releases is meant to help
# provide mechanically generated advice to developers when they read the
# detailed report showing what they may need to promote changes to
# production.
repositories_without_releases:
  - repository_without_release: verify-pki-certs
  - repository_without_release: ida-hub-acceptance-tests

# release_instructions lets you customise any advice you may have for
# developers who are wondering how to release code once they have changed
# files in one or more repositories that relate to an expiring certificate
release_instructions: 'Once you change all the files that contain the expiring certificate, you will need to go into verify-release-automation and run the following commands'

# certificate types specify phrases that are associated with a given type
# of certificate.  The program extracts the certificate authority
# information field from an x509 record and scans to see whether the human
# readable entry contains any phrases that would suggest it should be
# classified as a specific type.  For example, in the examples below,
# if the certificate authority field of an x509 ticket contains the phrase
# 'encrypt', then it will be classified as an encryption type of certificate.
# The attributes are:
#   type: a category that describes the nature of a certificate.
#         (eg: is it used for encryption, signing)
#   patterns: a list of phrases that the scanner will use to detect a match
#             for the type of certificate.  For example, ['signing', 'sgn']
#             would mean does the certificate authority description field
#             contain any of the words the word 'signing', 'sgn'
certificate_types:
    - type: encryption
      patterns: ['encrypt']
    - type: signing
      patterns: ['sign']

# environment_types classify a certificate as being part of some
# development environment such as testing, production, integration, staging,
# non-production. Each environment type has these fields:
# environment: an environment that is used to help classify a certificate
#              based on a role it plays in various software development
#              environments
# patterns: a list of phrases that the scanner will use to check for a match.
#
# The scanner returns a match for an environment if either the certificate
# authority x509 description field or any of its associated file paths contain
# any of the pattern phrases.
environment_types:
    - environment: prod
      patterns: ['ida.digital.cabinet-office.gov.uk', 'www.signin.service.gov.uk', 'idap_root_ca', 'prd', 'prod']
    - environment: vagrant
      patterns: ['vagrant']
    - environment: non-prod
      patterns: ['staging', 'perf', 'sample', 'idap_test_root_ca', 'test', 'tst', 'integration', 'non-prod']

