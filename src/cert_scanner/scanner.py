# x509 Certificate Scanner
# Copyright 2018 Kevin Garwood
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
from cert_scanner.system.configuration_manager import \
    create_configuration_manager
import cert_scanner.extract.main_extraction as main_extraction
from cert_scanner.util.certificate_scanner_utility import calculate_date_range
import cert_scanner.transform.main_transformation as main_transformation
import cert_scanner.report.main_report as main_report

import argparse
"""
This is the main starting point for the application.  It expects two
command line arguments:
    use_demo: If this flag is specified on the command line, the
          application will just run using certificates that are
          generated by a fake data source
    configuration_file_path: specifies the configuration file that
         drives the application.  In demonstration mode, that file is
         cert_scanner/tests/test_scanner_configuration.yml.  In production
         mode, the configuration file is specified with this parameter.
"""


def scan(use_demo, configuration_file_path):
    configuration_manager = \
        create_configuration_manager(use_demo,
                                     configuration_file_path)
    all_certs_df = \
        main_extraction.extract_all_x509_certificates(
                            use_demo,
                            configuration_manager)

    start_date, end_date = calculate_date_range()

    relevant_certs_df = \
        main_transformation.enhance_and_filter_certificates(
            configuration_manager,
            all_certs_df,
            start_date,
            end_date)
    weekly_expiration_metrics_df = \
        main_transformation.get_results_by_week(start_date,
                                                relevant_certs_df)
    monthly_expiration_metrics_df = \
        main_transformation.get_results_by_month(start_date,
                                                 relevant_certs_df)

    main_report.generate_reports(configuration_manager,
                                 all_certs_df,
                                 relevant_certs_df,
                                 weekly_expiration_metrics_df,
                                 monthly_expiration_metrics_df,
                                 start_date,
                                 end_date)



parser = argparse.ArgumentParser(
    description='Scans for x509 certificates in a target directory')
parser.add_argument('--demo',
                    action='store_true',
                    help='run demonstration of the application')
parser.add_argument('--configuration-path',
                    help=('Location of the configuration'
                          'file used by the application'))
args = parser.parse_args()
scan(args.demo, args.configuration_path)
